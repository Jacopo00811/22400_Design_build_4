from machine import Pin
from machine import ADC
from machine import DAC
from math import log

import machine
import utime

adc_V_lookup = [0.01852941, 0.04941177, 0.05352942, 0.05764706, 0.06176471, 0.06485295, 0.06794118, 0.07102942, 0.07411765, 0.07720589, 0.08029412, 0.08338236, 0.08647059, 0.09058825, 0.09470588, 0.09882354, 0.1029412, 0.1070588, 0.1111765, 0.1142647, 0.117353, 0.1204412, 0.1235294, 0.1266177, 0.1297059, 0.1327941, 0.1358824, 0.14, 0.1441177, 0.1482353, 0.1523529, 0.1564706, 0.1605882, 0.1636765, 0.1667647, 0.1698529, 0.1729412, 0.1760294, 0.1791177, 0.1822059, 0.1852941, 0.1894118, 0.1935294, 0.1976471, 0.2007353, 0.2038235, 0.2069118, 0.21, 0.2141177, 0.2182353, 0.222353, 0.2254412, 0.2285294, 0.2316177, 0.2347059, 0.2377941, 0.2408824, 0.2439706, 0.2470588, 0.2511765, 0.2552941, 0.2594118, 0.2635294, 0.2676471, 0.2717647, 0.274853, 0.2779412, 0.2810294, 0.2841177, 0.2872059, 0.2902942, 0.2933824, 0.2964706, 0.3005883, 0.3047059, 0.3088235, 0.3129412, 0.3170588, 0.3211765, 0.3252941, 0.3294118, 0.3335294, 0.3366177, 0.3397059, 0.3427941, 0.3458824, 0.3489706, 0.3520588, 0.3551471, 0.3582353, 0.362353, 0.3664706, 0.3705883, 0.3736765, 0.3767647, 0.379853, 0.3829412, 0.3860294, 0.3891177, 0.3922059, 0.3952941, 0.3994118, 0.4035295, 0.4076471, 0.4107353, 0.4138236, 0.4169118, 0.42, 0.4241177, 0.4282353, 0.432353, 0.4354412, 0.4385294, 0.4416177, 0.4447059, 0.4488235, 0.4529412, 0.4570589, 0.4601471, 0.4632353, 0.4663236, 0.4694118, 0.4735294, 0.4776471, 0.4817647, 0.4842353, 0.4867059, 0.4891765, 0.4916471, 0.4941177, 0.4972059, 0.5002942, 0.5033824, 0.5064706, 0.5095589, 0.5126471, 0.5157353, 0.5188236, 0.5229412, 0.5270588, 0.5311765, 0.5342648, 0.537353, 0.5404412, 0.5435295, 0.547647, 0.5517647, 0.5558824, 0.56, 0.5641177, 0.5682353, 0.5713236, 0.5744118, 0.5775001, 0.5805883, 0.5847059, 0.5888236, 0.5929412, 0.5960294, 0.5991177, 0.6022058, 0.6052941, 0.6094118, 0.6135294, 0.6176471, 0.6201177, 0.6225883, 0.6250588, 0.6275294, 0.63, 0.6341177, 0.6382353, 0.642353, 0.6464706, 0.6505883, 0.6547059, 0.6588235, 0.6629412, 0.6670588, 0.670147, 0.6732353, 0.6763235, 0.6794118, 0.6835294, 0.6876471, 0.6917647, 0.6948529, 0.6979412, 0.7010294, 0.7041177, 0.7072059, 0.7102942, 0.7133823, 0.7164706, 0.7205883, 0.7247059, 0.7288236, 0.7319118, 0.735, 0.7380882, 0.7411765, 0.7442647, 0.747353, 0.7504412, 0.7535295, 0.757647, 0.7617648, 0.7658824, 0.7689706, 0.7720589, 0.7751471, 0.7782353, 0.78, 0.7817647, 0.7835294, 0.7852942, 0.7870589, 0.7888236, 0.7905883, 0.7936765, 0.7967648, 0.7998529, 0.8029412, 0.8070589, 0.8111765, 0.8152942, 0.8183824, 0.8214706, 0.8245588, 0.8276471, 0.8317648, 0.8358824, 0.8400001, 0.8430882, 0.8461765, 0.8492647, 0.852353, 0.8554412, 0.8585295, 0.8616177, 0.8647059, 0.8688236, 0.8729412, 0.8770589, 0.8801471, 0.8832354, 0.8863235, 0.8894118, 0.8925, 0.8955883, 0.8986765, 0.9017648, 0.9079412, 0.9141177, 0.9165882, 0.9190589, 0.9215294, 0.9240001, 0.9264707, 0.9295588, 0.9326471, 0.9357353, 0.9388236, 0.9419118, 0.9450001, 0.9480883, 0.9511765, 0.9552942, 0.9594117, 0.9635295, 0.9676472, 0.9717647, 0.9758824, 0.9789706, 0.9820589, 0.9851471, 0.9882354, 0.9913236, 0.9944118, 0.9975, 1.000588, 1.003677, 1.006765, 1.009853, 1.012941, 1.017059, 1.021176, 1.025294, 1.028382, 1.031471, 1.034559, 1.037647, 1.040735, 1.043824, 1.046912, 1.05, 1.053088, 1.056177, 1.059265, 1.062353, 1.066471, 1.070588, 1.074706, 1.078824, 1.082941, 1.087059, 1.090147, 1.093235, 1.096324, 1.099412, 1.103529, 1.107647, 1.111765, 1.114853, 1.117941, 1.121029, 1.124118, 1.128235, 1.132353, 1.136471, 1.140588, 1.144706, 1.148824, 1.152941, 1.157059, 1.161177, 1.163647, 1.166118, 1.168588, 1.171059, 1.17353, 1.176618, 1.179706, 1.182794, 1.185882, 1.188971, 1.192059, 1.195147, 1.198235, 1.202353, 1.206471, 1.210588, 1.214706, 1.218824, 1.222941, 1.226029, 1.229118, 1.232206, 1.235294, 1.239412, 1.243529, 1.247647, 1.250735, 1.253824, 1.256912, 1.26, 1.263088, 1.266176, 1.269265, 1.272353, 1.275441, 1.278529, 1.281618, 1.284706, 1.287794, 1.290882, 1.293971, 1.297059, 1.301177, 1.305294, 1.309412, 1.3125, 1.315588, 1.318676, 1.321765, 1.325882, 1.33, 1.334118, 1.337206, 1.340294, 1.343382, 1.346471, 1.349559, 1.352647, 1.355735, 1.358824, 1.361912, 1.365, 1.368088, 1.371176, 1.373647, 1.376118, 1.378588, 1.381059, 1.383529, 1.395882, 1.398353, 1.400824, 1.403294, 1.405765, 1.408235, 1.411324, 1.414412, 1.4175, 1.420588, 1.426765, 1.432941, 1.435412, 1.437882, 1.440353, 1.442824, 1.445294, 1.449412, 1.453529, 1.457647, 1.460735, 1.463824, 1.466912, 1.47, 1.476177, 1.482353, 1.485441, 1.488529, 1.491618, 1.494706, 1.497794, 1.500882, 1.503971, 1.507059, 1.511177, 1.515294, 1.519412, 1.5225, 1.525588, 1.528677, 1.531765, 1.537941, 1.544118, 1.546588, 1.549059, 1.551529, 1.554, 1.556471, 1.560588, 1.564706, 1.568824, 1.572941, 1.577059, 1.581177, 1.584265, 1.587353, 1.590441, 1.593529, 1.596618, 1.599706, 1.602794, 1.605882, 1.608971, 1.612059, 1.615147, 1.618235, 1.624412, 1.630588, 1.633677, 1.636765, 1.639853, 1.642941, 1.646029, 1.649118, 1.652206, 1.655294, 1.658382, 1.661471, 1.664559, 1.667647, 1.673824, 1.68, 1.682471, 1.684941, 1.687412, 1.689882, 1.692353, 1.696471, 1.700588, 1.704706, 1.707794, 1.710882, 1.713971, 1.717059, 1.723235, 1.729412, 1.7325, 1.735588, 1.738677, 1.741765, 1.745882, 1.75, 1.754118, 1.757206, 1.760294, 1.763382, 1.766471, 1.769559, 1.772647, 1.775735, 1.778824, 1.782941, 1.787059, 1.791177, 1.793647, 1.796118, 1.798588, 1.801059, 1.80353, 1.806618, 1.809706, 1.812794, 1.815882, 1.822059, 1.828235, 1.830706, 1.833177, 1.835647, 1.838118, 1.840588, 1.843677, 1.846765, 1.849853, 1.852941, 1.859118, 1.865294, 1.868382, 1.871471, 1.874559, 1.877647, 1.880735, 1.883824, 1.886912, 1.89, 1.894118, 1.898235, 1.902353, 1.90647, 1.910588, 1.914706, 1.917794, 1.920882, 1.923971, 1.927059, 1.931176, 1.935294, 1.939412, 1.941882, 1.944353, 1.946824, 1.949294, 1.951765, 1.955882, 1.96, 1.964118, 1.967206, 1.970294, 1.973382, 1.976471, 1.980588, 1.984706, 1.988824, 1.992941, 1.997059, 2.001177, 2.004265, 2.007353, 2.010441, 2.01353, 2.016618, 2.019706, 2.022794, 2.025882, 2.03, 2.034118, 2.038235, 2.041324, 2.044412, 2.0475, 2.050588, 2.053677, 2.056765, 2.059853, 2.062941, 2.06603, 2.069118, 2.072206, 2.075294, 2.079412, 2.083529, 2.087647, 2.091765, 2.095882, 2.1, 2.103088, 2.106177, 2.109265, 2.112353, 2.115441, 2.11853, 2.121618, 2.124706, 2.128824, 2.132941, 2.137059, 2.141176, 2.145294, 2.149412, 2.1525, 2.155588, 2.158677, 2.161765, 2.164853, 2.167941, 2.17103, 2.174118, 2.178235, 2.182353, 2.186471, 2.189559, 2.192647, 2.195735, 2.198824, 2.201912, 2.205, 2.208088, 2.211177, 2.214265, 2.217353, 2.220441, 2.22353, 2.227647, 2.231765, 2.235883, 2.238971, 2.242059, 2.245147, 2.248235, 2.252353, 2.256471, 2.260588, 2.263677, 2.266765, 2.269853, 2.272941, 2.27603, 2.279118, 2.282206, 2.285294, 2.288383, 2.291471, 2.294559, 2.297647, 2.301765, 2.305882, 2.31, 2.313088, 2.316177, 2.319265, 2.322353, 2.325441, 2.32853, 2.331618, 2.334706, 2.338824, 2.342941, 2.347059, 2.350147, 2.353235, 2.356324, 2.359412, 2.360785, 2.362157, 2.363529, 2.364902, 2.366275, 2.367647, 2.36902, 2.370392, 2.371765, 2.375882, 2.38, 2.384118, 2.387206, 2.390294, 2.393382, 2.396471, 2.399559, 2.402647, 2.405735, 2.408823, 2.411912, 2.415, 2.418088, 2.421176, 2.425294, 2.429412, 2.433529, 2.436, 2.438471, 2.440941, 2.443412, 2.445882, 2.45, 2.454118, 2.458235, 2.461323, 2.464412, 2.4675, 2.470588, 2.473676, 2.476765, 2.479853, 2.482941, 2.485412, 2.487882, 2.490353, 2.492824, 2.495294, 2.498382, 2.501471, 2.504559, 2.507647, 2.510735, 2.513824, 2.516912, 2.52, 2.523088, 2.526176, 2.529265, 2.532353, 2.534824, 2.537294, 2.539765, 2.542235, 2.544706, 2.547794, 2.550882, 2.553971, 2.557059, 2.560147, 2.563235, 2.566324, 2.569412, 2.5725, 2.575588, 2.578676, 2.581765, 2.583824, 2.585882, 2.587941, 2.59, 2.592059, 2.594118, 2.598235, 2.602353, 2.606471, 2.60853, 2.610588, 2.612647, 2.614706, 2.616765, 2.618824, 2.620588, 2.622353, 2.624118, 2.625882, 2.627647, 2.629412, 2.631176, 2.635294, 2.639412, 2.643529, 2.646, 2.648471, 2.650941, 2.653412, 2.655882, 2.658971, 2.662059, 2.665147, 2.668235, 2.670706, 2.673177, 2.675647, 2.678118, 2.680588, 2.683059, 2.685529, 2.688, 2.690471, 2.692941, 2.695, 2.697059, 2.699118, 2.701177, 2.703235, 2.705294, 2.711471, 2.717647, 2.719412, 2.721177, 2.722941, 2.724706, 2.726471, 2.728235, 2.73, 2.732059, 2.734118, 2.736176, 2.738235, 2.740294, 2.742353, 2.744824, 2.747294, 2.749765, 2.752235, 2.754706, 2.756765, 2.758824, 2.760882, 2.762941, 2.765, 2.767059, 2.769529, 2.772, 2.774471, 2.776941, 2.779412, 2.781471, 2.78353, 2.785588, 2.787647, 2.789706, 2.791765, 2.793824, 2.795882, 2.797941, 2.8, 2.802059, 2.804118, 2.806588, 2.809059, 2.81153, 2.814, 2.816471, 2.818015, 2.819559, 2.821103, 2.822647, 2.824191, 2.825735, 2.82728, 2.828824, 2.831912, 2.835, 2.838088, 2.841177, 2.843235, 2.845294, 2.847353, 2.849412, 2.851471, 2.853529, 2.855588, 2.857647, 2.859706, 2.861765, 2.863824, 2.865882, 2.867941, 2.87, 2.872059, 2.874118, 2.876177, 2.878235, 2.880294, 2.882353, 2.884412, 2.886471, 2.88853, 2.890588, 2.892647, 2.894706, 2.896765, 2.898824, 2.900883, 2.902941, 2.904706, 2.906471, 2.908235, 2.91, 2.911765, 2.91353, 2.915294, 2.917059, 2.918824, 2.920588, 2.922353, 2.924118, 2.925883, 2.927647, 2.930118, 2.932588, 2.935059, 2.93753, 2.94, 2.942059, 2.944118, 2.946177, 2.948236, 2.950294, 2.952353, 2.953726, 2.955098, 2.956471, 2.957843, 2.959216, 2.960588, 2.961961, 2.963333, 2.964706, 2.966765, 2.968824, 2.970882, 2.972941, 2.975, 2.977059, 2.978824, 2.980588, 2.982353, 2.984118, 2.985882, 2.987647, 2.989412, 2.991471, 2.99353, 2.995588, 2.997647, 2.999706, 3.001765, 3.00353, 3.005294, 3.007059, 3.008824, 3.010588, 3.012353, 3.014118, 3.015882, 3.017647, 3.019412, 3.021177, 3.022941, 3.024706, 3.026471, 3.028235, 3.03, 3.031765, 3.03353, 3.035294, 3.037059, 3.038824, 3.040588, 3.042353, 3.044118, 3.045882, 3.047647, 3.049412, 3.051177, 3.052941, 3.054706, 3.056471, 3.058235, 3.06, 3.061765, 3.063529, 3.065294, 3.067059, 3.068824, 3.070588, 3.072353, 3.074118, 3.075882, 3.077427, 3.078971, 3.080515, 3.082059, 3.083603, 3.085147, 3.086691, 3.088235, 3.090294, 3.092353, 3.094412, 3.096471, 3.098529, 3.100588, 3.102353, 3.104118, 3.105882, 3.107647, 3.109412, 3.111177, 3.112941, 3.114706, 3.116471, 3.118235, 3.12, 3.121765, 3.12353, 3.125294, 3.127059, 3.128824, 3.130588, 3.132353, 3.134118, 3.135883, 3.137647, 3.15]

NOM_RES = 10000
SER_RES = 9820
TEMP_NOM = 25
NUM_SAMPLES = 25
THERM_B_COEFF = 3950
ADC_MAX = 1023
ADC_Vmax = 3.15

class TempSensor:
    def __init__(self, pinNoTemp = 32)-> None:
        """
            Temperature Sensor constructor with default pin no. 32.

            Params:
                pinNoTemp - number of the pin in which the sensor is connected
        """
        self.adc = ADC(Pin(pinNoTemp))
        self.adc.atten(ADC.ATTN_11DB)
        self.adc.width(ADC.WIDTH_10BIT)
        
    # Time ticks 13000 Microseconds
    def read_temp(self):
        """
            Method to measure the temperature from the thermistor.
            The returned result is averaged over 25 measurements.
        """
        raw_read = []
        # Collect NUM_SAMPLES
        for i in range(1, NUM_SAMPLES+1):
            raw_read.append(self.adc.read())

        # Average of the NUM_SAMPLES and look it up in the table after linearization
        raw_average = sum(raw_read)/NUM_SAMPLES
        #print('raw_avg = ' + str(raw_average))
        #print('V_measured = ' + str(adc_V_lookup[round(raw_average)]))

        # Convert the voltage to resistance
        raw_average = ADC_MAX * adc_V_lookup[round(raw_average)]/ADC_Vmax
        # print(raw_average)
        # print(len(adc_V_lookup))
        resistance = (SER_RES * raw_average) / (ADC_MAX - raw_average)
        # print('Thermistor resistance: {} ohms'.format(resistance))

        # Convert resistance to temperature
        steinhart  = -log(resistance / NOM_RES) / THERM_B_COEFF
        steinhart += 1.0 / (TEMP_NOM + 273.15)
        steinhart  = (1.0 / steinhart) - 273.15
        print('Temperature: {}°C'.format(steinhart))
        return steinhart

# def init_temp_sensor(TENP_SENS_ADC_PIN_NO = 32):
#     adc = ADC(Pin(TENP_SENS_ADC_PIN_NO))
#     adc.atten(ADC.ATTN_11DB)
#     adc.width(ADC.WIDTH_10BIT)
#     return adc

# def read_temp(temp_sens):
#     raw_read = []
#     # Collect NUM_SAMPLES
#     for i in range(1, NUM_SAMPLES+1):
#         raw_read.append(temp_sens.read())

#     # Average of the NUM_SAMPLES and look it up in the table
#     raw_average = sum(raw_read)/NUM_SAMPLES
#     print('raw_avg = ' + str(raw_average))
#     print('V_measured = ' + str(adc_V_lookup[round(raw_average)]))

#     # Convert to resistance
#     raw_average = ADC_MAX * adc_V_lookup[round(raw_average)]/ADC_Vmax
#     resistance = (SER_RES * raw_average) / (ADC_MAX - raw_average)
#     print('Thermistor resistance: {} ohms'.format(resistance))

#     # Convert to temperature
#     steinhart  = log(resistance / NOM_RES) / THERM_B_COEFF
#     steinhart += 1.0 / (TEMP_NOM + 273.15)
#     steinhart  = (1.0 / steinhart) - 273.15
#     return steinhart

print("I'm alive!\n")
utime.sleep_ms(2000)

temp_sens = TempSensor()

sample_last_ms = 0
SAMPLE_INTERVAL = 1000

while (True):
    if utime.ticks_diff(utime.ticks_ms(), sample_last_ms) >= SAMPLE_INTERVAL:
        temp = temp_sens.read_temp()
        print('Thermistor temperature: ' + str(temp))
        sample_last_ms = utime.ticks_ms()
